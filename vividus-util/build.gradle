project.description = 'VIVIDUS utilities'

//Additional SourceSets can be added to the jacocoOfflineSourceSets as needed by
project.ext.jacocoOfflineSourceSets = [ 'main' ]
tasks.register('doJacocoOfflineInstrumentation') {
    dependsOn = [classes, project.configurations.jacocoAnt]
    inputs.files classes.outputs.files
    File outputDir = layout.buildDirectory.dir('instrumentedClasses').get().asFile
    outputs.dir outputDir
    doFirst {
        project.delete(outputDir)
        ant.taskdef(
            resource: 'org/jacoco/ant/antlib.xml',
            classpath: project.configurations.jacocoAnt.asPath,
            uri: 'jacoco'
        )
        jacocoOfflineSourceSets.each { sourceSetName ->
            def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
            files(sourceSets[sourceSetName].output.classesDirs).each { classesDir ->
                if (classesDir.exists()) {
                    ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                        fileset(dir: classesDir, includes: '**/*.class')
                    }
                    //Replace the classes dir in the test classpath with the instrumented one
                    sourceSets.test.runtimeClasspath -= files(classesDir)
                    sourceSets.test.runtimeClasspath = files(instrumentedClassedDir) + sourceSets.test.runtimeClasspath
                }
            }
        }
    }
}
test.dependsOn doJacocoOfflineInstrumentation

//https://github.com/powermock/powermock/issues/1094
test {
    jvmArgs = [
        '--add-opens=java.base/java.io=ALL-UNNAMED',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.net=ALL-UNNAMED',
        '--add-opens=java.base/java.nio.file=ALL-UNNAMED',
        '--add-opens=java.base/java.time=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.fs=ALL-UNNAMED'
    ]
}

dependencies {
    api('org.freemarker:freemarker:2.3.34')
    api platform('com.fasterxml.jackson:jackson-bom:2.20.0')
    api('com.fasterxml.jackson.core:jackson-core')
    api('com.fasterxml.jackson.core:jackson-databind')
    api('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
    api('org.apache.commons:commons-lang3:3.19.0')

    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    implementation('org.apache.commons:commons-collections4:4.5.0')
    implementation('commons-io:commons-io:2.20.0')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-properties')
    implementation("com.github.vividus-framework.JsonPath:json-path:${versions.jsonPath}")

    testImplementation platform('org.junit:junit-bom:5.13.4')
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
    testCompileOnly('junit:junit:4.13.2')
    testImplementation('org.hamcrest:hamcrest:3.0')
    testImplementation platform('org.mockito:mockito-bom:5.20.0')
    testImplementation('org.mockito:mockito-junit-jupiter')
    testImplementation("com.github.powermock.powermock:powermock-api-mockito2:${versions.powermock}")
    testImplementation("com.github.powermock.powermock:powermock-module-junit4:${versions.powermock}")
    testCompileOnly("com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}")
}
